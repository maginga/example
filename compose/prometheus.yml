# version: "3.8"

# services:
#   cadvisor:
#     # 0.28.3 == latest
#     image: google/cadvisor:${CADVISOR_VERSION:-latest}
#     networks:
#       private:
#     command: -logtostderr -docker_only
#     volumes:
#       # For >= 0.29.0
#       #- /var/run/containerd/containerd.sock:/var/run/containerd/containerd.sock:readonly
#       - /:/rootfs:readonly
#       - /var/run:/var/run
#       - /sys:/sys:readonly
#       - /var/lib/docker/:/var/lib/docker:readonly
#       - /dev/disk:/dev/disk:readonly
#       #- /dev/kmsg:/dev/kmsg:readonly
#       #- /cgroup:/cgroup,readonly
#     deploy:
#       mode: global
#       resources:
#         limits:
#           #cpus: '0.20'
#           memory: 128M
#         reservations:
#           #cpus: '0.10'
#           memory: 64M
#   node-exporter:
#     image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v0.16.0}
#     networks:
#       private:
#     volumes:
#       - /proc:/host/proc
#       - /sys:/host/sys
#       - /:/rootfs
#       - /etc/hostname:/etc/host_hostname
#     # @TIP
#     # You can join instance label and host label via this query
#     # (node_boot_time_seconds{job="node-exporter"} ) * on(instance) group_left(host) (host{job="node-exporter"})
#     hostname: "{{.Node.ID}}"
#     environment:
#       HOST_HOSTNAME: /etc/host_hostname
#     configs:
#       - source: node-exporter-entrypoint.sh
#         target: /docker-entrypoint.sh
#         mode: 0777
#     entrypoint:
#       - /docker-entrypoint.sh
#     command: 
#       - '--path.procfs=/host/proc' 
#       - '--path.sysfs=/host/sys'
#       - "--collector.textfile.directory=${COLLECTOR_TEXTFILE_DIR:-/tmp/prometheus}"
#       - "--collector.filesystem.ignored-mount-points=\"^/(dev|etc|proc|sys|var/lib/docker)($$|/)\""
#     deploy:
#       mode: global
#       update_config:
#         parallelism: 2
#         delay: 20s
#       resources:
#         limits:
#           cpus: '0.10'
#           memory: 96M
#         reservations:
#           cpus: '0.10'
#           memory: 64M

#   docker-exporter:
#     image: alpine/socat:1.0.3
#     configs:
#      - source: docker-socat-entrypoint.sh
#        target: /entrypoint.sh
#        mode: 0777
#     entrypoint:
#        - /entrypoint.sh
#     networks:
#       private:
#     deploy:
#       mode: global
#       resources:
#         limits:
#           cpus: '0.05'
#           memory: 60M
#         reservations:
#           cpus: '0.05'
#           memory: 40M

#   alertmanager:
#     image: basi/alertmanager:${ALERTMANAGER_VERSION:-v0.8.0}
#     networks:
#       private:
#     ports:
#      - "9093:9093"
#     environment:
#       SLACK_API: ${SLACK_API:-YOURTOKENGOESHERE}
#       LOGSTASH_URL: http://logstash:8080/
#     command: -config.file=/etc/alertmanager/config.yml
#     deploy:
#       mode: replicated
#       replicas: 1
#       resources:
#         limits:
#           cpus: '0.01'
#           memory: 32M
#         reservations:
#           cpus: '0.01'
#           memory: 16M

#   prometheus:
#     #image: basi/prometheus-swarm:${PROMETHEUS_SWARM_VERSION:-latest}
#     image: prom/prometheus:${PROMETHEUS_SWARM_VERSION:-v2.4.2}
#     ports:
#       - "9090:9090"
#     volumes:
#       - prometheus:/prometheus
#     networks:
#       private:
#     configs:
#       - source: prometheus.yml
#         target: /etc/prometheus/prometheus.yml
#       - source: node_rules
#         target: /etc/prometheus/alert.rules_nodes
#       - source: task_rules
#         target: /etc/prometheus/alert.rules_tasks
#     command: 
#       - --config.file=/etc/prometheus/prometheus.yml
#       - --web.console.libraries=/etc/prometheus/console_libraries
#       - --web.console.templates=/etc/prometheus/consoles
#       - --storage.tsdb.retention=${PROMETHEUS_TSDB_RETENTION:-30d}
#     deploy:
#       mode: replicated
#       replicas: 1
#       resources:
#         limits:
#           cpus: '0.50'
#           memory: 4096M
#         reservations:
#           cpus: '0.40'
#           memory: 3182M
#       placement:
#         constraints:
#           - node.labels.service==prometheus

# configs:
#   docker-socat-entrypoint.sh:
#     file: ./docker-socat-entrypoint.sh
#   node-exporter-entrypoint.sh:
#     file: ./docker-node-exporter-entrypoint.sh
#   prometheus.yml:
#     file: ./prometheus/conf/prometheus.yml
#   node_rules:
#     file: ./prometheus/rules/swarm_node.rules.yml
#   task_rules:
#     file: ./prometheus/rules/swarm_task.rules.yml

# volumes:
#   prometheus: 

# networks:
#   private:
#     external: true
#     name: apm-net