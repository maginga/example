package main

import (
	"fmt"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/buger/jsonparser"
	//"gopkg.in/yaml.v2"
)

func main() {
	distance := make([]float32, 600)
	velocity := make([]float64, 600)
	mask := make([]byte, 600)

	input := `{"id":"EU406-e42221abf498","c":"144884","intervalMicro":"166.667007","a":[{"ts":17795,"tm":615206395,"d":[585a0184,5919ff4c,58aafe06,580effd6,58c301ee,591900f0,5842fe76,5848fe68,591800ce,58b901e8,5818000c,58b6fe38,5912ff4a,58520182,58470162,5912ff06,58c5fe22,5810003a,58aa0204,591f00aa,5862fe7a,5844fed2,58fb00f0,58bd01aa,580effa4,589dfdfc,5924ff8a,585c01d8,5828013e,58fefec4,58d8fe50,581c007c,589001d4,591f0028,5878fe3a,5833ff06,58f3013e,58da0184,5818ff4a,5885fe06,592afff0,587c01f0,582100e2,58edfe86,58f1fe8e,582900da,588101de,592bffea,588cfe16,581bff66,58d20184,58f4011e,5833fee6,5873fe28,59250038,589701de,581a006c,58d9fe3a,58fdfea4,583c00dc,58710178,591eff78,5899fdf2,5807ffa4,58be01c0,590300f0,583efeaa,584efe7a,590d00ae,58a701de,580a000e,58b6fe10,590fff14,584b015a,5852016e,5912ff36,58b5fe22,580a001c,58b00204,592700a2,5867fe6a,5847feca,590200f4,58c701a4,5810ff84,5892fe02,591aff94,586101b6,58320128,58fafeda,58d3fe64,581e007c,589701e0,5929002c,5879fe26,582dff06,58e50124,58d00162,5819ff42,5880fe10,592c000e,588601fa,581b00bc,58d8fe8c,58e5feb2,582c00d4,587801b6,5927ffae,5893fdfa,5816ff6e,58d701a8,59040126,583afed0,585efe64,59170088,58a401e0,5810002a,58c6fe0e,5911feee,5844014a,5855017e,591aff36,58abfdee,18cefee8,18f1ffe0,591400d8,5852fe9a,5850fea0,591800ec,58c701d8,5815ffca,58b5fdf0,5929ff48,58670184,5844011c,58faff00,58bcfe48,580a0056,589901fe,59250060,586efe44,5834fef2,58f20124,58d5017a,5819ff52,5883fe18,592b000c,587c0214,581d00f8,58e4feac,58e1fea2,582b00b8,588001b6,5927ffca,5891fe10,581dff6c,58d60192,58f2013e,5827fee6,5866fe2a,591f004c,58a601b0,58260034,58cffe42,5908feea,5843012e,58600182,5912ff76,589ffe26,5810ffce,58bb01c6,591300c0,5851fe84,5848fe9c,58fe00b4,58b80184,5817ffa8,58a4fe0a,5922ff7e,586501aa,58420146,5913fedc,58d5fe26,58180054,58a401f0,59290064,5876fe54,5831ff1e,58e50130,58df0146,5825ff1e,5885fe04,59300000,588a01ea,582500c0,58e7fe86,58f1fea4,582f00e0,588001ce,5930ffc6,5895fe00,5819ff6e,58d7019e,59060112,583cfec0,5865fe48,5922007a,58a101f8,580d0042,58c5fe22,5917ff14,5850015e,5850015e,5908ff3e,58acfe2c,5815ffee,58b801d2,591800b6,585efe92,5846feda,590000fe,58c701a4,5815ff96,589bfe0a,592bffb6,587701c6,58360108,58f0fee2,58cffe7e,5823007a,589101bc,592cfff0,5885fe00,581dff30,58dc0164,58e90140,5826ff00,5877fe10,592b0026,588f01f4,58190098,58d1fe76,18aaff78,18830078,585c0178,5923ff2c,58b6fde8,5813ffcc,58c201ce,591600d2,5852fe8e,584cfea0,590800ca,58c001a0,5819ffb6,58a2fe20,5917ff78,585901aa,58320138,5902fed0,58cefe38,58120060,589501e2,59290030,587dfe32,5831ff12,58ea0134,58e7013a,5826ff00,5878fe0e,592d0026,588a020c,581c00c6,58d5fea2,58ecfee6,58360100,58630184,591eff5e,58a8fe02,5816ffb0,58ca01c2,591100f0,5843fe92,5848fe86,590300b2,58b201a4,581cffe8,58b5fe22,591cff56,585101ae,58380164,5903ff0e,58c9fe5e,58230048,58a301c4,59230048,5873fe42,582fff0a,58ec0138,58e4014c,5824ff18,5883fe00,592f0000,588401fa,581300ac,58d6fe6c,58f9fed6,583a010a,58670192,591aff82,58a4fe22,5813ffce,58c501dc,590c0108,5841feae,5852fe7e,590c00a2,58b001b2,5820000a,58bcfe3c,5918ff4a,585a017a,5845013e,5903ff0a,58c5fe54,5815005a,589e01f2,59210072,586ffe64,5823ff46,58d9015e,58da015c,580fff02,5874fdd6,59350010,588d01fe,581d00b4,58d9fe8c,58effed0,583500f4,58650180,5916ff76,589cfe0e,5811ffa8,58c901c6,591000f6,5848fea4,5848fea4,590d00ee,58c001d4,5818ffe6,58a8fe3c,5912ff7a,585d0194,58370124,5900fed0,58d4fe4c,58120088,588b01f0,592d0010,5887fe28,582bff38,58e20154,58e10156,5825ff2a,587cfe28,59210010,588901d2,58170080,58cdfe68,58edfec4,583100ee,5857015e,590aff50,589ffe10,580affca,58c901fc,591c0106,5841fe7e,582ffeb4,58f200f0,58bc0194,5816ffaa,58a1fe10,5918ff76,585a01a8,582b011c,58edfedc,58ccfe7a,58220070,589101ba,5923000c,587efe22,5817ff52,58db0192,58f8013e,5829feda,5864fe2a,591f0054,589801e0,58180064,58c8fe5e,590cff2a,584e015a,584e0156,591dfef4,58bdfdd8,58040000,58ad01f2,59230096,5864fe62,5840fece,58f700ec,58c6017a,5815ff70,588dfe0c,592affd8,587901e6,582300e6,58e0feba,58ddfeae,582800c8,587901ba,5929ffb2,58a2fe22,581effa8,58ca01a6,59020100,5841fec4,5859fe7c,591f00c8,58c301d6,5820fff4,58b5fe3c,5914ff56,58520196,58350140,58fbfef4,58bcfe38,580d003c,589101c4,591b002c,587ffe60,582fff4c,58dc014c,58e2013e,5827ff14,587bfe1c,59250010,588801e2,58160092,58cffe72,58fffefc,58410128,585e017e,5915ff62,58a3fe0c,5812ffb8,58bb01aa,590b00bc,5855fea4,584bfec4,590600ec,58d0018a,5816ff62,5891fdf2,592effc2,587d01cc,582900d4,58e5feac,58dffe9c,582b00b2,587b019e,592cff94,589afde6,5814ff72,58cf019c,59020102,5844fed2,585afe90,591300b4,58ba01bc,5815ffd4,58aafe1c,5918ff66,585d0192,583b012e,58fafefe,58c0fe54,5816004c,589501c4,59240020,587afe2c,5824ff2c,58e2015c,58e00162,581bff1c,586cfe2a,59240046,589701e8,581b007a,58cdfe6c,58fbfef6,583f0122,58550164,5916ff2c,58bbfe1e,58160004,58b501dc,59230096,586cfe7c,5848fee6,58f400e4,58c90166,5816ff54,5885fe0c,5927ffe8,587a01e8,581f00da,58e4fe96,58e6fe9a,582700d0,58680192,5922ff6c,58a1fdf0,5812ff96,58ca01b6,591200dc,5852fea4,5852fea4,590200ae,58b6018e,5817ffba,58a5fe16,5929ff9c,586c01c6,582f0112,58f1fed6,58d3fe7a,58230084,588701ae,5923ffe2,588bfe22,581eff66,58d10176,58fc00f6,583ffec8,585efe6c,5910007a,58a601b0,581a0010,58bbfe38,5912ff38,5852016e,58480152,590cff0e,58c6fe3c,580d0060,589401f0,592a0032,587afe2c,5827ff24,58e2014c,58e60142,5826ff0a,586cfe3c,591c0044,589701ce,58230076,58d0fe74,5902ff08,583b0154,58450170,5916ff08,58c7fe20,58160028,58ae01e8,59220092,5868fe70,583bfef4,58f1010a,58d90152,5811ff02,586cfdf8,59240018,588e01d6,581d0088,58d2fe74,58fbfeee,58410114,586a018c,591bff80,58a8fe2c,580ffff2,58b901e8,591600d2,5852fe90,5841fec0,58fa00e2,58c80176]}]}`

	ts, _ := jsonparser.GetInt([]byte(input), "a", "[0]", "ts")
	tm, _ := jsonparser.GetInt([]byte(input), "a", "[0]", "tm")

	//1626266184342
	ms := ts*1000 + tm%1000
	nanos := time.Now().UnixNano()
	millis := nanos / 1000000
	mi := millis - ms
	fmt.Printf("%v\n", mi)
	k := time.Unix(0, mi*int64(time.Millisecond))
	fmt.Printf("%v\n", k)

	d, _ := jsonparser.GetUnsafeString([]byte(input), "a", "[0]", "d")
	d = strings.Replace(d, "[", "", 1)
	d = strings.Replace(d, "]", "", len(d))
	slice := strings.Split(d, ",")

	index := 0
	for _, str := range slice {
		// 585a0184
		s1 := str[4:]
		s2 := str[0:4]

		v, _ := strconv.ParseInt(s1, 16, 64)
		vt := float64(v) / math.Pow(2, 8)
		//vt := v / (2 ^ 8)
		if vt > (math.MaxUint8 / 2) {
			vt = vt - math.Pow(2, 8)
		}
		velocity = append(velocity, vt)

		d, _ := strconv.ParseInt(s2, 16, 64)
		xtt := d & 0x3FFF
		xt := float32(xtt) * 0.1
		distance = append(distance, xt)

		by := (byte)(((d & 0xC000) & 0xC000) >> 14) // get 2 MSB bits from the short
		mask = append(mask, by)

		index++

		/* 585a0184 vt: 1.5156, xt: 623.4 */
		/* 5919ff4c vt: -0.70313 */
		fmt.Printf("[%v] data:%s, v:%v, velocity:%v, distance:%v, mask:%v\n", index, str, v, vt, xt, by)

		if index > 5 {
			break
		}
	}
}
